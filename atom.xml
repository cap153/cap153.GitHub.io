<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://cap153.github.io</id>
    <title>夜未央，天将亮</title>
    <updated>2020-06-25T14:21:07.403Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://cap153.github.io"/>
    <link rel="self" href="https://cap153.github.io/atom.xml"/>
    <subtitle>我的小站</subtitle>
    <logo>https://cap153.github.io/images/avatar.png</logo>
    <icon>https://cap153.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 夜未央，天将亮</rights>
    <entry>
        <title type="html"><![CDATA[Linux文件及目录权限的意义]]></title>
        <id>https://cap153.github.io/post/linux-wen-jian-ji-mu-lu-quan-xian-de-yi-yi/</id>
        <link href="https://cap153.github.io/post/linux-wen-jian-ji-mu-lu-quan-xian-de-yi-yi/">
        </link>
        <updated>2020-06-22T13:54:32.000Z</updated>
        <content type="html"><![CDATA[<p>文件的权限与属性的学习是学习linux的一个相当重要的关卡，如果没有这部分概念，那么你将老是听不懂别人在讲什么。🙄<br>
尤其是当你的屏幕出现【Permission deny】的时候，不用担心肯定是权限设置错误。🌝<br>
在linux中，权限对于文件和目录的意义是不同的。👇<br>
<img src="https://cap153.github.io/post-images/1592834875170.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java方法调用内存图]]></title>
        <id>https://cap153.github.io/post/java-fang-fa-diao-yong-nei-cun-tu/</id>
        <link href="https://cap153.github.io/post/java-fang-fa-diao-yong-nei-cun-tu/">
        </link>
        <updated>2020-06-21T14:14:02.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>✍️写在最前：C语言中在调用函数的时候，要理解函数的实参和形参的关系。java方法与之类似，画出java的方法调用内存图可以很直观的分辨出这两者之间的区别。</p>
</blockquote>
<p>一段简单的代码如下：</p>
<pre><code class="language-java">import java.util.*;//调用Scanner实现输入数据的功能
public class Demo{
    public static void main(String args[]){
        //定义要用到的变量
        int a,b;
        Scanner in = new Scanner(System.in);

        //输入数据
        System.out.println(&quot;输入两个整数：&quot;);
        a = in.nextInt();
        b = in.nextInt();

        //调用函数比较大小
        compareNum(a, b);
    }

    //比较大小的方法
    public static void compareNum(int a, int b){
        if(a&gt;b)
            System.out.println(a+&quot;更大&quot;);
        else if(a&lt;b)
            System.out.println(b+&quot;更大&quot;);
        else
            System.out.println(&quot;相等&quot;);
    }
}
</code></pre>
<p>这段代码利用 compareNum 函数实现了比较两个数大小的功能。<br>
它的内存结构图是这样的：<br>
<img src="https://cap153.github.io/post-images/1592783670428.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python初探]]></title>
        <id>https://cap153.github.io/post/python-chu-tan/</id>
        <link href="https://cap153.github.io/post/python-chu-tan/">
        </link>
        <updated>2020-06-20T14:44:50.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>✍️写在最前：我常在微信公众号看到这样一句话：人生苦短，我学python。包括老师也推荐我去学习这门计算机语言。我有幸在图书馆借到了一本我唯一能找到的一本python书籍《Head First Python》,这是一本有趣的书。🤗</p>
</blockquote>
<p>这本书介绍的第一段代码居然不是 &quot;Hello World!&quot;<br>
它的理由是实现&quot;Hello World!&quot;对于python来说太简单了，只需要一句代码就能完成。<br>
书中的第一段代码如下：</p>
<pre><code class="language-python">from datetime import datetime

odds = [ 1,  3,  5,  7,  9,  11, 13, 17, 19,
         21, 23, 25, 27, 29, 31, 33, 37, 39,
         41, 43, 45, 47, 49, 51, 53, 57, 59]

right_this_minute = datetime.today().minute

if right_this_minute in odds:
    print(&quot;This minute seems a little odd.&quot;)
else:
    print(&quot;Not an odd minute.&quot;)
</code></pre>
<p>文件名是<strong>odd.py</strong><br>
我发现的一些特点如下：</p>
<ul>
<li>没有分号，用缩进来规范代码</li>
<li>这段代码实现了判断现在的分钟数是否为奇数的功能</li>
<li>调用了python标准库的datetime模版的函数datetime来访问系统时间</li>
<li>odds是一个整数列表，不过<strong>python中的列表可以包含任意类型的数据</strong></li>
<li>一般的，python中一行结束就标志着一条语句结束，不过这个一般规律也可能有例外</li>
<li>odds列表跨3行，却只是一条语句，因为解释器只有找到与开始中括号 [ 匹配的结束中括号 ] 时才会认为语句结束</li>
</ul>
<p>书中的总结是这样的：</p>
<ul>
<li>python提供了一个内置的IDE，名为IDLE，允许创建、编辑和运行python代码，你要做的就是输入代码、保存然后按F5。</li>
<li>IDLE与python解释器交互，解释器会为你自动完成编译-&gt;链接-&gt;运行的过程。这使你能够集中精力编写你的代码。</li>
<li>解释器从上到下运行（存储在一个文件中的代码），一次执行一行。python中没有main()函数/方法的概念。</li>
<li>python提供ing了一个强大的标准库，允许你你访问大量可重用的模块（datetime只是其中的一个例子）。</li>
<li>编写python程序时，可以使用一组标准数据结构。列表是其中之一，这与数组的概念很类似。</li>
<li>不需要声明一个变量的类型。在python中为一个变量赋值时，它会自动取相关数据的类型。</li>
<li>可以用if/elif/else语句完成判定。if,elif和else关键字放在代码块前面，在python中代码块称为“代码组”。</li>
<li>代码组很容易实现，因为它们总是缩进的。缩进是python提供的唯一代码分组机制。</li>
<li>除了缩进，代码组前面还可以有一个冒号(😃。这是python语言的一个语法要求。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java函数语法]]></title>
        <id>https://cap153.github.io/post/java-han-shu-yu-fa/</id>
        <link href="https://cap153.github.io/post/java-han-shu-yu-fa/">
        </link>
        <updated>2020-06-19T03:14:52.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>✍️写在最前：java的方法对应C语言中的函数，不过语法上有很多差异🤔</p>
</blockquote>
<p>##函数（方法）<br>
方法是一段能完成独立功能的代码快。<br>
我们只要写一次方法，可以被多次调用，提高了代码的<strong>重复性</strong>。</p>
<p>相关语法如下：</p>
<pre><code class="language-java">&lt;public&gt; &lt;static&gt;  返回值类型[void]  方法名(数据类型 变量名1, 数据类型 变量名2, ...){
    //方法体
    [return 结果值;]
}
</code></pre>
<p>相关特点如下：</p>
<ul>
<li>方法一定要写到类里面，不能写到主方法里</li>
<li>主方法也是一种方法</li>
<li>返回值类型[void]：方法给调用者返回的数据类型，如果方法没有返回值，我们就用 void</li>
<li>方法名：间名知意，使用驼峰模式来规范方法名：xxxYyyZzz</li>
<li>参数列表：方法的参数可有可无，参数列表中可以有多个参数，先指定参数数据类型，再指定参数的变量名，多个参数用逗号分隔</li>
<li>如果方法的返回值是 void，那么 return;是代表程序的终止；如果方法要是有返回值那么就不能有return;</li>
<li>程序的返回值一定要和返回值类型匹配</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux正确关机方式]]></title>
        <id>https://cap153.github.io/post/guaji/</id>
        <link href="https://cap153.github.io/post/guaji/">
        </link>
        <updated>2020-06-18T05:09:29.000Z</updated>
        <content type="html"><![CDATA[<p>安装Linux的时候，如果没有安装图形界面，要关机是个头疼的问题。☠️<br>
面对黑屏白字的终端，只有正确的指令才能关机了。✍️<br>
我常用的关机方式是 poweroff 这一指令，init 0 也是很方便的。✌️<br>
<img src="https://cap153.github.io/post-images/1592535731808.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[写在最前]]></title>
        <id>https://cap153.github.io/post/helloworld/</id>
        <link href="https://cap153.github.io/post/helloworld/">
        </link>
        <updated>2020-06-18T04:58:13.000Z</updated>
        <content type="html"><![CDATA[<p>我无意间在微信公众号发现了一篇搭建个人博客网站的文章。<br>
文章介绍了用github配合gridea写博客。<br>
个性化的网页无疑吸引了我，我可以按照自己的意愿随意添加素材。<br>
我是一个想到就去做的人。<br>
我决定搭建一个个人的博客网站。<br>
我还有许多的东西需要学习。<br>
希望我能够坚持下去。<br>
ps：可以点击<a href="https://cap153.github.io/tags/">标签</a>快速访问分类内容<br>
在这里所写的文章只是我学习理解的笔记整理</p>
]]></content>
    </entry>
</feed>